## Functional components with parameters

-- index.js
    <ComponentWithParameter 
    title="Student Situation" 
    student="Paul" grade={6.9}/>

-- component.jsx
    export default function Generate(props) {
        const status = props.grade >= 7 ? 'Passed': 'Failed';
        return (
            <div>
                <h2>{ props.title }</h2>
                <p>
                    <strong>{ props.student } </strong>
                    has grade
                    <strong> { props.grade } </strong>
                    and it was considered 
                    <strong> { status }</strong>
                </p>
            </div>
        );
    }

## Fragments

-- component.jsx
    export default function Fragment(props) {
        return (
            <React.Fragment> or <>
                <h2>Fragment</h2>
                <p>Be careful with this error</p>
            <React.Fragment/> or </>
        );
    }

## Using props.children

-- index.jsx

    export default () => {
        return (
            <Component>
                <Child />
            </Component>
        );
    }

-- component.jsx
    export default props => {
        return (
            <div>
                {props.children}
            </div>
        );
    }


## Changing style css from property

-- index.jsx
    export default () => {
        return (
            <Component color="#fff" />
        );
    }

-- component.jsx
    export default props => {
        const newStyle = {
            background-color: props.color || '#f00'
        }
        
        return (
            <div style= {newStyle}></div>
        );
    };

## Passing properties from father to children

-- index.jsx
    <Family surname="Silva />

-- component.jsx
    export default props => {
        return (
            <div>
                <FamilyMember {..props} />
                <FamilyMember surname={props.surname} />
                <FamilyMember surname="Silva" />
            </div>
        );
    }

## Passing properties from father to children 2

-- index.jsx
    <Family surname="Ferreira">
        <FamilyMember name="Pedro"/>
        <FamilyMember name="Ana"/>
        <FamilyMember name="Carol"/>
    </Family>

-- component.jsx
    export default props => {
        return (
            <div>
                <span>{props.name} {props.surname}</span>
            </div>
        );
    };

## Repetition

-- component.jsx
    export default props => {
        
        const studentsList = students.map(student => {
            return (
                <li key={student.id}>{ student.id } - { student.name } - { student.grade }</li>
            );
        });

        return (
            <div>
                <ul style={{listStyle: 'none'}}>
                    { studentsList }
                </ul>
            </div>
        );
    };

## Conditional Renderization 1

-- index.jsx
    <EvenOrOdd number={20}/>

-- component.jsx
export default props => {
    const isEven = props.number % 2 === 0;
    return (
        <div>
            <span>{ props.number } is </span>
            {   
                isEven ? 
                <span>Even</span> : 
                <span>Odd</span>
            }
        </div>
    );
};

## Conditional Renderization 2

-- if.js
    export default props => {
        if(props.expr){
            return props.children;
        } else {
            return false;
        }
    };

-- component.jsx
    export default props => {
        <div>
            <If expr={props.username} >
                <div> Hello {props.username} </div>
            </If>
        </di>
    };

## Direct Communication

-- father.jsx
    export default props => {
        return (
            <Child value={10} />
        );
    }

-- child.jsx
    export default props => {
        <div>{props.value}</div>
    }

## Indirect Communication

-- father.jsx
    export default props => {
        function getValue(x) {
            console.log(x);
        }

        return (
            <Child onClicked={getValue} />
        );
    }

-- child.jsx
    export default props => {
        return (
            <button onClick={e => {
                props.onClicked(10);
            }}>clickMe</button>
        );
    }

## Indirect communication setting property on father with useState hook

-- father.jsx
import { useState } from 'react';

    export default props => {
        const [value, setValue] = useState(0);
        function getValue(value) {
            setValue(value);
        }

        return (
            {value}
            <Child onClicked={getValue} />
        );
    }

-- child.jsx
    export default props => {
        return (
            <button onClick={e => {
                props.onClicked(10);
            }}>clickMe</button>
        );
    }


## Controlled component
    
-- input.jsx
    import {useState} from 'react'
    
    export default props => {
        const [value, setValue] = useState(0)

        const updateValue = e => {
            setValue(e.target.value);
        }

        return (
            <div>{value}</div>
            <input value={value} onChange={updateValue}/>
        );
    };